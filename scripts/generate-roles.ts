import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
// Remove the problematic import
// import { Role } from '@prisma/client';

// Get current directory in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const OUTPUT_DIR = path.join(__dirname, '../src/generated');
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'roles.ts');
const SCHEMA_PATH = path.join(__dirname, '../prisma/schema.prisma');

// Function to extract enum values from schema file
function extractEnumValues(schemaContent: string, enumName: string): string[] {
  const enumRegex = new RegExp(`enum\\s+${enumName}\\s*\\{(.*?)\\}`, 's');
  const match = schemaContent.match(enumRegex);

  if (!match || !match[1]) {
    throw new Error(`Enum '${enumName}' not found in schema.`);
  }

  const enumBody = match[1];
  // Extract values - assumes one value per line, trim whitespace
  const values = enumBody
    .split('\n')
    .map((line) => line.trim())
    .filter((line) => line && !line.startsWith('//')); // Filter out empty lines and comments

  return values;
}

function generateRolesFile() {
  console.log('Generating roles file...');

  // Read the schema file
  let schemaContent;
  try {
    schemaContent = fs.readFileSync(SCHEMA_PATH, 'utf-8');
  } catch (err) {
    console.error(`Error reading Prisma schema file at ${SCHEMA_PATH}:`, err);
    process.exit(1);
  }

  // Extract Role enum values
  let stringRoleValues: string[];
  try {
    stringRoleValues = extractEnumValues(schemaContent, 'Role');
  } catch (err) {
    console.error('Error extracting Role enum values:', err);
    process.exit(1);
  }

  if (stringRoleValues.length === 0) {
    console.error(
      'Could not extract string values for Role enum. Check schema.prisma.'
    );
    process.exit(1);
  }

  // Create the string literal type definition
  const typeDefinition = `export type AppRole = ${stringRoleValues.map((value) => `'${value}'`).join(' | ')};\n`;

  // Create the constant array definition
  const arrayDefinition = `export const ROLES = ${JSON.stringify(stringRoleValues)} as const;\n`;

  // Construct the file content
  const fileContent = `// This file is generated by scripts/generate-roles.ts
// Do not edit this file manually.

${typeDefinition}
${arrayDefinition}
`;

  // Ensure the output directory exists
  if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR, { recursive: true });
  }

  // Write the file
  fs.writeFileSync(OUTPUT_FILE, fileContent);

  console.log(`Successfully generated ${OUTPUT_FILE}`);
}

try {
  generateRolesFile();
} catch (error) {
  console.error('Error generating roles file:', error);
  process.exit(1);
}
