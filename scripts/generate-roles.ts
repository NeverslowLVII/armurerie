import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { Role } from '@prisma/client';

// Get current directory in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const OUTPUT_DIR = path.join(__dirname, '../src/generated');
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'roles.ts');

function generateRolesFile() {
  console.log('Generating roles file...');

  const roleValues = Object.values(Role);

  // Ensure the values are strings (TypeScript enums can have reverse number mappings)
  const stringRoleValues = roleValues.filter(
    (value) => typeof value === 'string'
  );

  if (stringRoleValues.length === 0) {
    console.error(
      'Could not extract string values from Role enum. Check Prisma client generation.'
    );
    process.exit(1);
  }

  // Create the string literal type definition
  const typeDefinition = `export type AppRole = ${stringRoleValues.map((value) => `'${value}'`).join(' | ')};\n`;

  // Create the constant array definition
  const arrayDefinition = `export const ROLES = ${JSON.stringify(stringRoleValues)} as const;\n`;

  // Construct the file content
  const fileContent = `// This file is generated by scripts/generate-roles.ts
// Do not edit this file manually.

${typeDefinition}
${arrayDefinition}
`;

  // Ensure the output directory exists
  if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR, { recursive: true });
  }

  // Write the file
  fs.writeFileSync(OUTPUT_FILE, fileContent);

  console.log(`Successfully generated ${OUTPUT_FILE}`);
}

try {
  generateRolesFile();
} catch (error) {
  console.error('Error generating roles file:', error);
  // Attempting to access Role might fail if prisma generate hasn't run correctly yet.
  if (
    error instanceof TypeError &&
    error.message.includes("Cannot read properties of undefined (reading '")
  ) {
    console.warn(
      "Hint: This might be because the Prisma client hasn't been generated yet. Try running 'npx prisma generate' first."
    );
  }
  process.exit(1);
}
