generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  email       String     @unique
  username    String?    @unique
  password    String
  name        String
  role        Role       @default(EMPLOYEE)
  color       String?
  contractUrl String?
  lastLogin   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deleted     Boolean    @default(false)
  deletedAt   DateTime?
  commission  Float      @default(0)
  feedback    Feedback[]
  weapons     Weapon[]
  orders      Order[]
}

model BaseWeapon {
  id                     Int      @id @default(autoincrement())
  nom                    String   @unique
  prix_defaut            Int
  cout_production_defaut Int      @default(0)
  weapons                Weapon[]
  orderItems             OrderItem[]
}

model Weapon {
  id              Int        @id @default(autoincrement())
  horodateur      DateTime
  user_id         Int
  detenteur       String
  bp              String?
  nom_arme        String
  serigraphie     String     @unique
  prix            Int
  cout_production Int        @default(0)
  base_weapon     BaseWeapon @relation(fields: [nom_arme], references: [nom])
  user            User       @relation(fields: [user_id], references: [id])
}

model WeaponCatalog {
  id                 Int      @id @default(autoincrement())
  name               String   @unique
  category           String
  puissance          Float
  cadence            Float
  precision          Float
  portee             Int
  capacite           Int
  recharge           Float
  cout               Float
  vente              Float
  canon_precision    Int      @default(0)
  canon_long         Int      @default(0)
  canon              Int      @default(0) 
  canon_court        Int      @default(0)
  ressort            Int      @default(0)
  mire               Int      @default(0)
  detente            Int      @default(0)
  chien              Int      @default(0)
  armature_legere    Int      @default(0)
  armature           Int      @default(0)
  armature_lourde    Int      @default(0)
  armature_precision Int      @default(0)
  crosse             Int      @default(0)
  total_ressort      Int      @default(0)
  total_acier        Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Feedback {
  id          Int            @id @default(autoincrement())
  type        FeedbackType
  title       String
  description String
  status      FeedbackStatus @default(OPEN)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  submittedBy Int?
  user_id     Int?
  user        User?          @relation(fields: [user_id], references: [id])
}

model Order {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  userId     Int
  totalPrice Int
  status     OrderStatus @default(PENDING)
  user       User        @relation(fields: [userId], references: [id])
  items      OrderItem[]

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id           Int        @id @default(autoincrement())
  orderId      Int
  baseWeaponId Int
  quantity     Int
  pricePerItem Int        // Prix au moment de la commande
  costPerItem  Int        // Co√ªt de production au moment de la commande
  order        Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  baseWeapon   BaseWeapon @relation(fields: [baseWeaponId], references: [id])

  @@index([orderId])
  @@index([baseWeaponId])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Role {
  EMPLOYEE
  DEVELOPER
  CO_PATRON
  PATRON
}

enum FeedbackType {
  BUG
  FEATURE_REQUEST
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  REJECTED
}
